Kullanýcýnýn sepete ekleme, silme, güncelleme iþlemlerinden sorumlu olcak.
Sepet çok dinamik bir yapý. Bu yüzden Read&Write iþlemlerinin hýzlý olmasý lazým.
Burada NoSQL veritabaný kullanýlabilir MongoDB gibi ya da fiziksel hafýza yerine Memory'de tutabileceðimiz Redis'te tutabiliriz.

REDIS kullanacaðýz. => Basket Microservice + Redis (Redise baðlanmak için kütüphane = StackExhange.Redis)

A) PROJENÝN OLUÞTURULMASI
	Services/Basket altýna ASP.NET CORE WEB API oluþturuyoruz. 
	References'a Shared'ý ekliyoruz.
	Portunu 5013 ayarlýyoruz.
	StackExchange.Redis paketini yüklüyoruz.

B) DTO'larýn oluþturulmasý
	BasketDTO oluþturuldu. Sepetin kendisini tutacak.
	BasketItemDTO oluþturuldu. Sepetteki ürün bilgisi ismi fiyatý adet vs. 
	Basket 1-n BasketItem

C) Appsettings ayarlarý (Redise baðlanacaðýmýz hostu ve portu belirteceðiz.)
	Appsettings > Host ve Port (Host þu anlýk localhost yazacaðýz ama dockerize ettiðimiz zaman zaten ezeceðiz bu bilgiyi.)
	(Localhost ifadesini appsettings dýþýna yazmamak gerekiyor. Çünkü dockerize ettiðimizde bu bilginin otomatik ezilebilmesi için appsettingste durmasý gerekiyor.)
	RedisSettings class (options pattern) Configuration'larý class üzerinden okuyacaðýz.
	
	Appsetttings içerisine RedisSettings eklendi.
	Settings klasörü altýnda RedisSettings class'ý oluþturuldu ve appsettingsteki configuration keyleri ile map olacak þekilde propertyler yazýldý.
	Bu map'i program.cs'te ekliyoruz. (Services.Configure<RedisSettings>)

D) IBasketService Sepete CRUD iþlemleri için interface'i Services altýnda IBasketService eklendi. Methodlar yazýldý.
E) RedisService class'ýný oluþturduk. Redis ile baðlantý kurmaktan sorumlu class burasý. Exchange.Redis'i kullanarak bu class'ý dolduruyoruz.
	Burada parametre olarak db alýyoruz. Redis'te çok fazla veritabaný var. Bunlarýn hepsi memory'de tutuluyor fakat birbirinden ayrýlýyor. 
	1.veritabanýný prodda kullan. 2.veritabanýný test için kullan gibi ayrýmlar yapýlabiliyor. Bu yüzden hangi db istediðimizi parametre ile geçiyoruz GetDB methoduna.
	program.cs'e Singleton olarak tanýmlýyoruz. Program ayaða kalkýnca ayaða kalksýn ve tek nesne üzerinden devam edelim diye. Services.AddSingleton ekledik ve func doldurduk.

F) BasketService class'ýný yazýyoruz. IBasketService'den miras alarak. RedisService kullanarak db iþlemlerini yapýyoruz.
G) ISharedIdentityService:SharedIdentityService(Shared Library'e ekleyeceðiz.) Bu service'in amacý token içinden UserId'yi çekcek.
	Token içindeki sub field'ý Kullanýcý'nýn id'si oluyor. Bu token hangi kullanýcya ait onu belirtiyor.

	SharedLibrary içinde Services altýna eklendiler.
	HttpContext içindeki User içinden Claimler geliyor. Claim = kullanýcý hakkýnda tutulan data denilebilir.
	SharedLibrary'de claimlere eriþebilmek için class'ýn içinde IHttpContextAccessor kullanmak gerekiyor. 
	IHttpContextAccessor'ý kullanaiblmek için gittik Basket projesinin program.cs'indeki Service'lere ekliyoruz.
	Basket'in program dosyasýna eklediðimiz için artýk BasketService'ten GetUserId'yi çaðýrdýmýz zaman direkt Token içindeki Sub bilgisini alabileceðiz.
	Bir de Basket apiden SharedIdentityService'e DI ile eriþebilmek için yine Basket.Program.cs'ye AddScoped olarak SharedIdentityService'i ekliyoruz.

H) Program.cs'e service'lere DI için BasketService'i ekliyoruz.
	BasketsController'ý oluþturuyoruz.

I) container'lardaki "mongodb" isimli container'ý catalog.API kullanýyor. Bunun ismini catalogdb olarka deðiþtirmek için silip tekrar kuruyoruz. (host portunu 27017 yaptýk yine)
	
	Redis'i container olarak ayaða kaldýrýyoruz.
	Portrainer üzerinden AppTemplates'den redis'i seçiyoruz.
	appsettings.json'da port'u 6379 vermiþtik. container'da da onu veriyoruz.

J) BasketAPI'yi koruma altýna alýyoruz.
	* JwtBearer kütüphanesini dahil ediyoruz Nuget
	* services.AddAuthentication'ý ekliyoruz.
	* Bu API'nin önceki oluþturduðumuz apilerden farký ResourceOwnerPassword type JWT gerektiriyor olmasý. Bu yüzden token'da mutlaka "Sub" type'ýný bekliyoruz.
		Bu yüzden program.cs'e "var requireAuthorizePolicy = new AuthorizationPolicyBuilder().RequireAuthenticatedUser().Build();" satýrý ekledik.
	* Önceki API'lerde AddController içinde ""opt.Filters.Add(new AuthorizeFilter());"" satýrýný ekliyoduk. 
		Bu sefer elimizde direkt policy var. Auth. olmuþ bir user gerekiyor. Bu yüzden "opt.Filters.Add(new AuthorizeFilter(requireAuthorizePolicy));" ekliyoruz.
	* Bir de useAuthentication ekliyoruz.

		